name: Multi-Tenancy Load-Test 

env:
  PYTHONUNBUFFERED: 1


on:
  push:
    # branches:
    #   - main  # Or any branch you want to trigger this workflow

jobs:
  mt-load-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Add gcloud auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT }}'

    - name: Install gcloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: 'latest'

    - name: Install kubectl
      run: gcloud components install kubectl --quiet

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
         version: '3.8.2'

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 'latest'

    - name: Install Python Dependencies
      run: pip3 install -r requirements.txt

    - name: Create Cluster
      run: python3 run.py --step=create_cluster

    - name: Deploy Weaviate
      env:
        ACCESS_KEY: ${{ secrets.GCS_HMAC_ACCESS_KEY }}
        SECRET_KEY: ${{ secrets.GCS_HMAC_SECRET_KEY }}
      run: python3 run.py --step=deploy_weaviate

    - name: Deploy Observability
      run: python3 run.py --step=deploy_observability

    - name: Wait for Weaviate to be ready
      run: python3 run.py --step=wait_weaviate_ready

    - name: Push Images
      run: python3 run.py --step=push_images

    - name: Reset Schema
      run: python3 run.py --step=reset_schema

    - name: Import Data
      run: python3 run.py --step=import_data

    - name: Wait for import
      run: python3 run.py --step=wait_for_import

    - name: Offload Tenants
      run: python3 run.py --step=tenants_offload

    - name: Onload Tenants
      run: python3 run.py --step=tenants_onload

    - name: Query
      run: python3 run.py --step=query

    - name: Create Backup
      run: python3 run.py --step=create_backup

    - name: Wait for Backup
      run: python3 run.py --step=wait_for_backup

    - name: Delete Collection
      run: python3 run.py --step=delete_collection

    - name: Restore Backup
      run: python3 run.py --step=restore_backup

    - name: Wait for Backup Restore
      run: python3 run.py --step=wait_for_backup_restore

    - name: Query
      run: python3 run.py --step=query

    - name: Destroy Cluster
      if: always()  # This ensures that this step runs regardless of previous step results
      run: python3 run.py --step=destroy_cluster

